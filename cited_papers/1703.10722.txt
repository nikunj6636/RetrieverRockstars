# FACTORIZATION TRICKS FOR LSTM NETWORKS

Oleksii Kuchaiev
NVIDIA
okuchaiev@nvidia.com

Boris Ginsburg
NVIDIA
bginsburg@nvidia.com

# ABSTRACT

We present two simple ways of reducing the number of parameters and accelerating the training of large Long Short-Term Memory (LSTM) networks: the first one is “matrix factorization by design” of LSTM matrix into the product of two smaller matrices, and the second one is partitioning of LSTM matrix, its inputs and states into the independent groups. Both approaches allow us to train large LSTM networks significantly faster to the near state-of the art perplexity while using significantly less RNN parameters.

# 1 INTRODUCTION

LSTM networks (Hochreiter & Schmidhuber, 1997) have been successfully used in language modeling (Jozefowicz et al., 2016; Shazeer et al., 2017), speech recognition (Xiong et al., 2016), machine translation (Wu et al., 2016), and many other tasks. However, these networks have millions of parameters, and require weeks of training on multi-GPU systems.

We introduce two modifications of LSTM cell with projection, LSTMP (Sak et al., 2014), to reduce the number of parameters and speed-up training. The first method, factorized LSTM (F-LSTM) approximates big LSTM matrix with a product of two smaller matrices. The second method, group LSTM (G-LSTM) partitions LSTM cell into the independent groups. We test F-LSTM and G-LSTM architectures on the task of language modeling using One Billion Word Benchmark (Chelba et al., 2013). As a baseline, we used BIGLSTM model without CNN inputs described by Jozefowicz et al. (2016). We train all networks for 1 week on a DGX Station system with 4 Tesla V100 GPUs, after which BIGLSTM’s evaluation perplexity was 35.1. Our G-LSTM based model got 36 and F-LSTM based model got 36.3 while using two to three times less RNN parameters.

# 1.1 LONG SHORT-TERM MEMORY OVERVIEW

Learning long-range dependencies with Recurrent Neural Networks (RNN) is challenging due to the vanishing and exploding gradient problems (Bengio et al., 1994; Pascanu et al., 2013). To address this issue, the LSTM cell has been introduced by Hochreiter & Schmidhuber (1997), with the following recurrent computations:

LST M : ht−1, ct−1, xt → h, c.t t

where xt is input, ht is cell’s state, and ct is cell’s memory. We consider LSTM cell with projection of size p, LSTMP, where Equation 1 is computed as follows (Sak et al., 2014; Zaremba et al., 2014). First, cell gates (i, f, o, g) are computed:

where xt ∈ Rp, ht ∈ Rp, and T : R2p → R4n is an affine transform T = W ∗ [x, ht−1] + b.t. Next state ht ∈ Rp and memory ct ∈ Rn are computed using following equations:

ct = f ct−1 + i g; ht = P (o tanh(c))t

where P : Rn → Rp is a linear projection. The major part of LSTMP cell computation is in computing affine transform T because it involves multiplication with 4n × 2p matrix W. Thus we focus on reducing the number of parameters in W.

# Workshop track - ICLR 2017

# 1.2 RELATED WORK

The partition of layer into parallel groups have been introduced by Krizhevsky et al. (2012) in AlexNet, where some convolutional layers have been divided into two groups to split the model between two GPUs. Multi-group convnets have been widely used to reduce network weights and required compute, for example by Esser et al. (2016). This multi-group approach was extended to the extreme in Xception architecture by Chollet (2016). The idea of factorization of large convolutinal layer into the stack of layers with smaller filters was used, for example, in VGG networks (Simonyan & Zisserman, 2014), and in ResNet “bottleneck design” (He et al., 2016). Denil et al. (2013) have shown that it is possible to train several different deep architectures by learning only a small number of weights and predicting the rest. In case of LSTM networks, ConvLSTM (Shi et al., 2015), has been introduced to better exploit possible spatiotemporal correlations, which is conceptually similar to grouping.

# 2 MODELS

# 2.1 FACTORIZED LSTM CELL

Factorized LSTM (F-LSTM) replaces matrix W by the product of two smaller matrices that essentially try to approximate W as W ≈ W2 * W1, where W1 is of size 2p × r, W2 is r × 4n, and r < p <= n (“factorization by design”). The key assumption here is that W can be well approximated by the matrix of rank r. Such approximation contains less LSTMP parameters than original model - (r * 2p + r * 4n) versus (2p * 4n) and, therefore, can be computed faster and synchronized faster in the case of distributed training.

|Softmax Layer|Softmax Layer|Softmax Layer|
|---|---|---|
|LSTM|T2-W2*T1 + b|G-LSTM|
|T-W*d + b| |Tl-W1*dl + blT2-W2*d2 + b2|
| |Tl-W1*d F-LSTM| |
|Embedding Layer|Embedding Layer|Embedding Layer|
|a) CAT|b) CAT|CAT|

Figure 1: Language model using: (a) 2 regular LSTM layers, (b) 2 F-LSTM layers, and (c) 2 G-LSTM layers with 2 group in each layer. Equations inside cells show what kind of affine transforms are computed by those cells at each time step. Here d = (x, h) for models without groups and d1 = (x1, h1), d2 = (x2, h2) for model with two groups; and time index dropped for clarity.

# 2.2 GROUP LSTM CELL

This approach is inspired by groups in Alexnet (Krizhevsky et al., 2012). We postulate that some parts of the input xt and hidden state ht can be thought of as independent feature groups. For example, if we use two groups, then both xt and ht it only dependent on xti, ht-1 and cell’s memory together xt = (xt 1, xt 2) and ht = (ht 1, ht 2), with h are effectively split into two vectors concatenated state. Therefore, for k groups Equation 2 changes to:

|f|o|g|
|---|---|---|
|sigm|sigm|tanh|
|T1(xt1)|ht1-1|...|
|sigm|sigm|tanh|
|Tk(xtkhtk-1)| | |

where, Tj is a group j’s affine transform from R2p/k to R4n/k. The partitioned T will now have k * 4n * 2p/k * k parameters. This cell architecture is well suited for model parallelism since every group computation is independent. An alternative interpretation of G-LSTM layers is demonstrated in

# Workshop track - ICLR 2017

|Model|Perplexity|Step|Num of RNN parameters|Words/sec|
|---|---|---|---|---|
|BIGLSTM baseline|35.1|0.99M|151,060,480|33.8K|
|BIG F-LSTM F512|36.3|1.67 M|52,494,336|56.5K|
|BIG G-LSTM G-2|36|1.37M|83,951,616|41.7K|
|BIG G-LSTM G-4|40.6|1.128M|50,397,184|56K|
|BIG G-LSTM G-8|39.4|850.4K|33,619,968|58.5K|

the Figure 1 (c). While this might look similar to ensemble (Shazeer et al., 2017) or multi-tower (Ciregan et al., 2012) models, the key differences are: (1) input to different groups is different and assumed independent, and (2) instead of computing ensemble output, it is concatenated into independent pieces.

# 3 EXPERIMENTS AND RESULTS

For testing we used the task of learning the joint probabilities over word sequences of arbitrary lengths n: P (w1, ..., wn) = ∏ni=1 P (wi|w1, ..., wi−1), such that “real” sentences have high probabilities compared to the random sequences of words. Figure 1 (a) shows the typical LSTM-based model, where first the words are embedded into the low dimensional dense input for RNN, then the “context” is learned using RNNs via number of steps and, finally, the softmax layer converts RNN output into the probability distribution P (w1, ..., wn). We test the following models:

- BIGLSTM - model with projections but without CNN inputs from Jozefowicz et al. (2016)
- BIG F-LSTM F512 - with intermediate rank of 512 for LSTM matrix W
- BIG G-LSTM G-4, with 4 groups in both layers
- BIG G-LSTM G-16, with 16 groups in both layers.

We train all models on DGX Station with 4 GV100 GPUs for one week using Adagrad optimizer, projection size of 1024, cell size of 8192, mini-batch of 256 per GPU, sampled softmax with 8192 samples and 0.2 learning rate. Note that the use of projection is crucial as it helps to keep down embedding and softmax layer sizes. Table 1 summarizes our experiments.

Judging from the training loss Plots 2 in Appendix, it is clearly visible that at the same step count, model with more parameters wins. However, given the same amount of time, factorized models train faster. While the difference between BIGLSTM and BIG G-LSTM-G2 is clearly visible, BIG G-LSTM-G2 contains almost 2 times less RNN parameters than BIGLSTM, trains faster and, as a results, achieves similar evaluation perplexity within the same training time budget (1 week). Our code is available at https://github.com/okuchaiev/f-lm

# 3.1 FUTURE RESEARCH

While one might go further and try to approximate transform T using arbitrary feed forward neural network with 2p inputs and 4n outputs, during our initial experiments we did not see immediate benefits of doing so. Hence, it remains a topic of future research.

It might be possible to reduce the number of RNN parameters even further by stacking G-LSTM layers with increasing group counts on top of each other. In our second, smaller experiment, we replace the second layer of BIG G-LSTM-G4 network by the layer with 8 groups instead of 4, and call it BIG G-LSTM-G4-G8. We let both BIG G-LSTM-G4 and BIG G-LSTM-G4-G8 ran for 1 week on 4 GPUs each and achieved very similar perplexities. Hence, the model with “hierarchical” groups did not lose much accuracy, ran faster and got better perplexity. Such “hierarchical” group layers look intriguing as they might provide a way for learning different levels of abstractions but this remains a topic of future research.

# Workshop track - ICLR 2017

# Acknowledgements

We are grateful to Scott Gray and Ciprian Chelba for helping us identify and correct issues with earlier versions of this work.

# REFERENCES

Yoshua Bengio, Patrice Simard, and Paolo Frasconi. Learning long-term dependencies with gradient descent is difficult. IEEE transactions on neural networks, 5(2):157–166, 1994.

Ciprian Chelba, Tomas Mikolov, Mike Schuster, Qi Ge, Thorsten Brants, Phillipp Koehn, and Tony Robinson. One billion word benchmark for measuring progress in statistical language modeling. arXiv preprint arXiv:1312.3005, 2013.

François Chollet. Xception: Deep learning with depthwise separable convolutions. arXiv preprint arXiv:1610.02357, 2016.

Dan Ciregan, Ueli Meier, and Jürgen Schmidhuber. Multi-column deep neural networks for image classification. In Computer Vision and Pattern Recognition (CVPR), 2012 IEEE Conference on, pp. 3642–3649. IEEE, 2012.

Misha Denil, Babak Shakibi, Laurent Dinh, Nando de Freitas, et al. Predicting parameters in deep learning. In Advances in Neural Information Processing Systems, pp. 2148–2156, 2013.

Steven K Esser, Paul A Merolla, John V Arthur, Andrew S Cassidy, Rathinakumar Appuswamy, Alexander Andreopoulos, David J Berg, Jeffrey L McKinstry, Timothy Melano, Davis R Barch, et al. Convolutional networks for fast, energy-efficient neuromorphic computing. Proceedings of the National Academy of Sciences, pp. 201604850, 2016.

Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR), June 2016.

Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation, 9(8): 1735–1780, 1997.

Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring the limits of language modeling. arXiv preprint arXiv:1602.02410, 2016.

Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convolutional neural networks. In Advances in neural information processing systems, pp. 1097–1105, 2012.

Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difficulty of training recurrent neural networks. ICML (3), 28:1310–1318, 2013.

Hasim Sak, Andrew W Senior, and Françoise Beaufays. Long short-term memory recurrent neural network architectures for large scale acoustic modeling. In Interspeech, pp. 338–342, 2014.

Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton, and Jeff Dean. Outrageously large neural networks: The sparsely-gated mixture-of-experts layer. arXiv preprint arXiv:1701.06538, 2017.

Xingjian Shi, Zhourong Chen, Hao Wang, Dit-Yan Yeung, Wai-kin Wong, and Wang-chun Woo. Convolutional lstm network: A machine learning approach for precipitation nowcasting. In Proceedings of the 28th International Conference on Neural Information Processing Systems, NIPS’15, pp. 802–810, Cambridge, MA, USA, 2015. MIT Press. URL http://dl.acm.org/citation.cfm?id=2969239.2969329.

Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556, 2014.

Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang Macherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. Google’s neural machine translation system: Bridging the gap between human and machine translation. arXiv preprint arXiv:1609.08144, 2016.

# Workshop track - ICLR 2017

Wayne Xiong, Jasha Droppo, Xuedong Huang, Frank Seide, Mike Seltzer, Andreas Stolcke, Dong Yu, and Geoffrey Zweig. Achieving human parity in conversational speech recognition. arXiv preprint arXiv:1610.05256, 2016.

Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. Recurrent neural network regularization. arXiv preprint arXiv:1409.2329, 2014.

5

# Workshop track - ICLR 2017

# APPENDIX: TRAINING LOSS FOR 4 LSTM-LIKE MODELS

|(A)|0.000|200.0k|400.0k|600.0k|800.0k|1.000M|1.200M|
|---|---|---|---|---|---|---|---|
|(B)| | | | | | | |
| | | | |Name| | | |
| | | | |BIGLSTM/train| | | |
| | | | |BIG_F-LSTM-FS12/train| | | |
| | | | |BIG_G-LSTM-GI6/train| | | |
| | | | |BIG_G-LSTM-GA/train| | | |

20 40 80 100 120 140 160

Figure 2: Y-axis: same for (A) and (B) - training loss log-scale, X-axis: for (A) - step, or mini-batch count, for (B) - hours (w.g. wall time) of training. BIGLSTM baseline, BIG G-LSTM-G4, BIG G-LSTM-G16, and BIG F-LSTM-F512 all trained for exactly one week. It is clearly visible, that at the same step count, the model with more parameters wins. On the other hand, factorized models can do significantly more iterations in the given amount of time and therefore get to the better results given same amount of time. (full extent of X-axis for both (A) and (B) is 1 week).